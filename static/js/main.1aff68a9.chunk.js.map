{"version":3,"sources":["logo.svg","components/Tasks.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","colors","Tasks","Component","constructor","props","super","this","state","todoName","table","tableStr","qrenabled","searchStatus","category","categories","onAddTodoForm","event","preventDefault","onAddTodo","push","status","name","date","Date","now","setState","saveTable","onRemoveTodo","tableNew","filter","x","onUpdateTodo","index","findIndex","JSON","stringify","localStorage","setItem","filterTasks","onAddCategory","color","length","parse","getItem","handleChange","bind","showNotifications","handleClick","componentDidMount","n","supported","show","close","target","tag","[object Object]","value","render","React","createElement","ReactNotifications","onRef","ref","title","body","moment","fromNow","toLocaleUpperCase","icon","timeout","onClick","Progress","total","success","active","progress","Header","style","cursor","autoComplete","onSubmit","Input","onChange","Icon","inverted","circular","link","fluid","placeholder","Table","celled","Body","sort","y","map","_ref","TableRow","key","TableStatuses","1","2","_ref2","Row","Cell","collapsing","Label","as","basic","format","replace","Notes","Form","TextArea","Button","App","arguments","page","onPageChange","document","className","Menu","fixed","Container","Item","header","Image","size","src","logo","marginRight","text","marginTop","flex","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1aff68a9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport {\n  Header,\n  Input,\n  Icon,\n  Table,\n  Label,\n  Progress\n} from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport ReactNotifications from 'react-browser-notifications';\n\nconst colors = [\n  'red',\n  'orange',\n  'olive',\n  'green',\n  'teal',\n  'violet',\n  'purple',\n  'pink',\n  'brown',\n  'grey',\n  'black',\n]\n\nexport default class Tasks extends Component {\n  state = {\n    todoName: \"\",\n    table: [],\n    tableStr: \"\",\n    qrenabled: false,\n    searchStatus: 1,\n    category: \"\",\n    categories: []\n  };\n  constructor(props) {\n    super(props);\n\n    let table = JSON.parse(localStorage.getItem(\"table\"));\n\n    if (table) this.state.table = table;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\n\n    this.showNotifications = this.showNotifications.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  componentDidMount() {\n    this.showNotifications();\n  }\n  showNotifications() {\n    if (this.n.supported()) this.n.show();\n  }\n\n  handleClick(event) {\n    // Do something here such as\n    // console.log(\"Notification Clicked\") OR\n    // window.focus() OR\n    // window.open(\"http://www.google.com\")\n\n    this.n.close(event.target.tag);\n  }\n\n  onAddTodoForm = event => {\n    event.preventDefault();\n    this.onAddTodo();\n  };\n  onAddTodo = () => {\n    const { todoName, table } = this.state;\n    if (todoName) {\n      table.push({ status: 1, name: todoName, date: Date.now() });\n      this.setState({ todoName: \"\" });\n      this.saveTable(table);\n    }\n  };\n  onRemoveTodo = date => {\n    const { table } = this.state;\n    let tableNew = table.filter(x => x.date !== date);\n    this.saveTable(tableNew);\n  };\n  onUpdateTodo = date => {\n    const { table } = this.state;\n\n    let index = table.findIndex(x => x.date === date);\n    if (table[index].status === 1) table[index].status = 2;\n    else table[index].status = 1;\n\n    this.saveTable(table);\n  };\n  saveTable = table => {\n    const tableStr = JSON.stringify(table);\n    this.setState({ table, tableStr });\n    localStorage.setItem(\"table\", tableStr);\n  };\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n\n  filterTasks = (searchStatus) => {\n    this.setState({ searchStatus })\n  }\n\n  onAddCategory = event => {\n\n    event.preventDefault();\n\n    var { categories, category } = this.state\n\n    categories.push({ name: category, color: colors[categories.length % colors.length] })\n\n    this.setState({ categories })\n  }\n\n  render() {\n    const { category, todoName, table, searchStatus, categories } = this.state;\n    return (\n      <div>\n        <ReactNotifications\n          onRef={ref => (this.n = ref)} // Required\n          title={table.filter(x => x.status === searchStatus).length+ \" Tasks !\"} // Required\n          body={moment('2019-12-01').fromNow().toLocaleUpperCase()}\n          icon=\"icon.png\"\n          tag=\"abcdef\"\n          timeout=\"5000\"\n          onClick={event => this.handleClick(event)}\n        />\n        <Progress\n          total={table.length}\n          value={table.filter(x => x.status === 2).length}\n          success active progress=\"ratio\" />\n        <Header><span style={{ color: searchStatus === 1 ? 'black' : '#eee', cursor: 'pointer' }}\n          onClick={() => this.filterTasks(1)}>Tasks ({table.filter(x => x.status === 1).length}) </span>\n          <span style={{ color: searchStatus === 2 ? 'black' : '#eee', cursor: 'pointer' }}\n            onClick={() => this.filterTasks(2)} > Completed Task ({table.filter(x => x.status === 2).length})</span></Header>\n        <form autoComplete=\"off\" onSubmit={this.onAddTodoForm}>\n          <Input\n            value={todoName}\n            name=\"todoName\"\n            onChange={this.handleChange}\n            icon={\n              <Icon\n                onClick={() => this.onAddTodo()}\n                name=\"add\"\n                inverted\n                circular\n                link\n              />\n            }\n            fluid\n            placeholder=\"Todo Name...\"\n          />\n        </form>\n        {/* <form autoComplete=\"off\" style={{ marginTop: 10 }} onSubmit={this.onAddCategory}>\n          <Input\n            label='Category'\n            placeholder='Category Name' value={category}\n            onChange={this.handleChange}\n            name=\"category\" />\n        </form>\n        {categories.map(category => <Label\n          as=\"a\"\n          basic\n          color={category.color}\n        >\n          {category.name}\n        </Label>)} */}\n        <Table celled>\n          <Table.Body>\n            {table.filter(x => x.status === searchStatus).sort((x, y) => y.date - x.date).map(({ name, date, status }) => (\n              <TableRow\n                key={\"row_\" + date}\n                name={name}\n                date={date}\n                status={status}\n                onUpdateTodo={this.onUpdateTodo}\n                onRemoveTodo={this.onRemoveTodo}\n              />\n            ))}\n          </Table.Body>\n        </Table>\n      </div>\n    );\n  }\n}\n\nconst TableStatuses = {\n  1: { name: \"Added\", color: \"yellow\" },\n  2: { name: \"Completed\", color: \"blue\" }\n};\n\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\n  <Table.Row>\n    <Table.Cell collapsing>\n      <Label\n        as=\"a\"\n        basic\n        color={TableStatuses[status].color}\n        onClick={() => onUpdateTodo(date)}\n      >\n        {TableStatuses[status].name}\n      </Label>\n    </Table.Cell>\n    <Table.Cell>{name}</Table.Cell>\n    <Table.Cell title={moment(date).fromNow()} collapsing>\n      <Label color=\"violet\">\n        {moment(date)\n          .format(\"DD-MM-YYYY HH:mm\")\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\n      </Label>\n    </Table.Cell>\n    <Table.Cell collapsing>\n      <Icon\n        onClick={() => onRemoveTodo(date)}\n        name=\"remove\"\n        inverted\n        circular\n        link\n      />\n    </Table.Cell>\n  </Table.Row>\n);\n","import React, { Component } from \"react\";\nimport {\n  Button,\n  Form,\n  TextArea,\n  Icon,\n  Table,\n  Label,\n  Header\n} from \"semantic-ui-react\";\nimport moment from \"moment\";\nimport ReactNotifications from 'react-browser-notifications';\n\nexport default class Notes extends Component {\n  state = {\n    todoName: \"\",\n    table: []\n  };\n  constructor(props) {\n    super(props);\n\n    let table = JSON.parse(localStorage.getItem(\"tableNotes\"));\n\n    if (table) this.state.table = table;\n\n    this.handleChange = this.handleChange.bind(this);\n    this.onRemoveTodo = this.onRemoveTodo.bind(this);\n    this.onUpdateTodo = this.onUpdateTodo.bind(this);\n    \n    this.showNotifications = this.showNotifications.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n componentDidMount(){\n   this.showNotifications();\n }\n  showNotifications() {\n    // If the Notifications API is supported by the browser\n    // then show the notification\n    if(this.n.supported()) this.n.show();\n  }\n \n  handleClick(event) {\n    // Do something here such as\n    // console.log(\"Notification Clicked\") OR\n    // window.focus() OR\n    // window.open(\"http://www.google.com\")\n \n    // Lastly, Close the notification\n    this.n.close(event.target.tag);\n  }\n\n  onAddTodoForm = event => {\n    event.preventDefault();\n    this.onAddTodo();\n  };\n  onAddTodo = () => {\n    const { todoName, table } = this.state;\n    if (todoName) {\n      table.push({ status: 1, name: todoName, date: Date.now() });\n      this.setState({ todoName: \"\" });\n      this.saveTable(table);\n    }\n  };\n  onRemoveTodo = date => {\n    const { table } = this.state;\n    let tableNew = table.filter(x => x.date !== date);\n    this.saveTable(tableNew);\n  };\n  onUpdateTodo = date => {\n    const { table } = this.state;\n\n    let index = table.findIndex(x => x.date === date);\n    if (table[index].status === 1) table[index].status = 2;\n    else table[index].status = 1;\n\n    this.saveTable(table);\n  };\n  saveTable = table => {\n    this.setState({ table });\n    localStorage.setItem(\"tableNotes\", JSON.stringify(table));\n  };\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value });\n  }\n  render() {\n    const { todoName, table } = this.state;\n    return (\n      <div>\n        <Header>Notes</Header>\n        <Form onSubmit={this.onAddTodoForm}>\n          <TextArea\n            value={todoName}\n            name=\"todoName\"\n            onChange={this.handleChange}\n            icon={\n              <Icon\n                onClick={() => this.onAddTodo()}\n                name=\"add\"\n                inverted\n                circular\n                link\n              />\n            }\n            placeholder=\"Note...\"\n          />\n          <Button onClick={() => this.onAddTodo()}>Add</Button>\n        </Form>\n        <Table celled>\n          <Table.Body>\n            {table.map(({ name, date, status }) => (\n              <TableRow\n                key={\"row_\" + date}\n                name={name}\n                date={date}\n                status={status}\n                onUpdateTodo={this.onUpdateTodo}\n                onRemoveTodo={this.onRemoveTodo}\n              />\n            ))}\n          </Table.Body>\n        </Table>\n        <ReactNotifications\n          onRef={ref => (this.n = ref)} // Required\n          title=\"Hey There!\" // Required\n          body=\"This is the body\"\n          icon=\"icon.png\"\n          tag=\"abcdef\"\n          timeout=\"2000\"\n          onClick={event => this.handleClick(event)}\n        />\n \n      </div>\n    );\n  }\n}\n\nconst TableStatuses = {\n  1: { name: \"Added\", color: \"yellow\" },\n  2: { name: \"Completed\", color: \"blue\" }\n};\n\nconst TableRow = ({ name, date, status, onRemoveTodo, onUpdateTodo }) => (\n  <Table.Row>\n    <Table.Cell collapsing>\n      <Label\n        as=\"a\"\n        basic\n        color={TableStatuses[status].color}\n        onClick={() => onUpdateTodo(date)}\n      >\n        {TableStatuses[status].name}\n      </Label>\n    </Table.Cell>\n    <Table.Cell>{name}</Table.Cell>\n    <Table.Cell title={moment(date).fromNow()} collapsing>\n      <Label color=\"violet\">\n        {moment(date)\n          .format(\"DD-MM-YYYY HH:mm\")\n          .replace(moment().format(\"DD-MM-YYYY \"), \"\")}\n      </Label>\n    </Table.Cell>\n    <Table.Cell collapsing>\n      <Icon\n        onClick={() => onRemoveTodo(date)}\n        name=\"remove\"\n        inverted\n        circular\n        link\n      />\n    </Table.Cell>\n  </Table.Row>\n);\n","import React, { Component } from \"react\";\nimport {\n  Container,\n  Image,\n  Menu\n} from \"semantic-ui-react\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport logo from \"./logo.svg\";\nimport \"./index.css\";\nimport Tasks from \"./components/Tasks\";\nimport Notes from \"./components/Notes\";\n\nexport default class App extends Component {\n  componentDidMount(){\n    document.title=\"React Todo Manager\"\n  }\n  state = {\n    page: \"tasks\"\n  };\n  onPageChange = page => {\n    this.setState({ page });\n  };\n  render() {\n    const { page } = this.state;\n    return (\n      <div className=\"Site\">\n        <title>React Todo Manager</title>\n        <Menu color={'teal'} fixed=\"top\" inverted>\n          <Container>\n            <Menu.Item as=\"a\" header>\n              <Image size=\"mini\" src={logo} style={{ marginRight: \"1.5em\" }} />\n              React Todo Manager\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"tasks\")}\n            >\n              Tasks\n            </Menu.Item>\n            <Menu.Item\n              as=\"a\"\n              onClick={() => this.onPageChange(\"notes\")}\n            >\n              Notes\n            </Menu.Item>\n          </Container>\n        </Menu>\n\n        <Container\n          className=\"Site-content\"\n          text\n          style={{ marginTop: \"7em\", flex: 1 }}\n        >\n          <div>{page === \"tasks\" ? <Tasks /> : <Notes />}</div>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}